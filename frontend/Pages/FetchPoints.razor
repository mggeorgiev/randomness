@page "/fetchpoints"
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@*@inject IAccessTokenProvider TokenProvider*@
@inject IConfiguration Configuration
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.Extensions.Configuration

@*@using Microsoft.AspNetCore.Components.WebAssembly.Authentication*@

<PageTitle>Points clustering</PageTitle>

<h1>Points clustering</h1>

<p>Sourge: https://twitter.com/nntaleb/status/1470516531553615872</p>

<div class="input-group mb-3">
      <div class="input-group-prepend">
        <span class="input-group-text"># of points</span>
      </div>
    <input type="number" class="form-control" placeholder="# of points" @bind="@PointsCount" />
    <!-- a slider bound to a C# field -->
    <label class="form-label">Point count: </label>
    <input type="range" @bind="PointsCount" @bind:event="oninput">
</div>

<div class="btn-group" role="group" aria-label="Basic mixed styles example">

    <button @onclick="GetRequest" class="btn btn-secondary">Get Data</button>
    <button @onclick="PlotRandom" class="btn btn-primary">Random</button>
    <button @onclick="PlotRandomXY" class="btn btn-primary">RandomXY</button>

    <!-- buttons call C# functions -->
    <button @onclick="PlotSin" class="btn btn-info">Sin</button>
    <button @onclick="PlotWalk" class="btn btn-dark">Walk</button>
</div>

    <!-- this is where the Google Chart is displayed -->
    <div id="chart_div" style="width: 900px; height: 500px;"></div>


@if (Points == null)
{
    if (DataIsRequested)
    {
        <p><em>Loading...</em></p>
    }
}

@code {
    private int count=0;
    private bool DataIsRequested; 
    //private int points = 8;
    private int PointsCount = 8;
    private string? responseBody;
    private RootObject[] Points;

    private class RootObject
    {
        public double x { get; set; }
        public double y { get; set; }
    }

    private int GetCount()
    {
        if (count >= PointsCount)
            count = 0;
        return ++count;
    }
    private int RessetCount() => count=0;

    private async Task GetRequest()
    {
        count = 0;
        DataIsRequested = true;
        try	
        {

            //var baseURL = Configuration.GetSection("PointsFunctionAddress").Value;
            var baseURL = Configuration.GetSection("RandomnessAPIFunctionAddress").Value;

            string url = baseURL+ "number=" + PointsCount.ToString();

            HttpResponseMessage response = await Http.GetAsync(url);
            // Log the status code for debugging
            Console.WriteLine($"Status Code: {response.StatusCode}");
            
            response.EnsureSuccessStatusCode(); 
            // Log the response headers for debugging
            Console.WriteLine($"Response Headers: {response.Headers}");

            responseBody = await response.Content.ReadAsStringAsync();
            Points = await response.Content.ReadFromJsonAsync<RootObject[]>();

            PlotPoints();
            DataIsRequested = false;
        }
        catch(HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");	
            Console.WriteLine("Message :{0} ",e.Message);
            if (e.InnerException != null)
            {
                Console.WriteLine($"Inner Exception: {e.InnerException.Message}");
            }
        }
        catch (Exception e) 
        {
            Console.WriteLine("\nGeneral Exception Caught!");
            Console.WriteLine($"Message: {e.Message}"); 
        }
    }

    //Scatter chart code

    Random Rand = new Random();

    private void PlotData(double[] xs, double[] ys)
    {
        // This function calls a JavaScript function to update the chart.
        // Notice how multiple parameters are passed in.
        JsRuntime.InvokeVoidAsync("createNewChart", new { xs, ys });
    }

    private void PlotPoints()
    {
        double[] xs = new double[Points.Length];
        double[] ys = new double[Points.Length];
        for (var i = 0; i< Points.Length; i++)
        {
            xs[i] = Points[i].x*100;
            ys[i] = Points[i].y*100;
        }
        PlotData(xs, ys);
    }

    private void PlotSin()
    {
        double[] xs = Enumerable.Range(0, PointsCount).Select(x => (double)x).ToArray();
        double[] ys = xs.Select(x => Math.Sin(x / 10)).ToArray();
        PlotData(xs, ys);
    }

    private void PlotRandom()
    {
        double[] xs = Enumerable.Range(0, PointsCount).Select(x => (double)x).ToArray();
        double[] ys = xs.Select(x => (Rand.NextDouble() - .5) * 1000).ToArray();
        PlotData(xs, ys);
    }

    private void PlotWalk()
    {
        double[] xs = Enumerable.Range(0, PointsCount).Select(x => (double)x).ToArray();
        double[] ys = new double[PointsCount];
        for (int i = 1; i < ys.Length; i++)
            ys[i] = ys[i - 1] + Rand.NextDouble() - .5;
        PlotData(xs, ys);
    }

    private void PlotRandomXY()
    {
        double[] xs = Enumerable.Range(0, PointsCount).Select(x => Rand.NextDouble()).ToArray();
        double[] ys = Enumerable.Range(0, PointsCount).Select(x => Rand.NextDouble()).ToArray();
        PlotData(xs, ys);
    }
}