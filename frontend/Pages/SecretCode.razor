@page "/secret-code"
@inject HttpClient Http
@*@inject IAccessTokenProvider TokenProvider*@
@inject IConfiguration Configuration
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@*@using Microsoft.AspNetCore.Components.WebAssembly.Authentication*@

<PageTitle>Crack the secret code</PageTitle>

<h1>Crack the secret code</h1>

<p>A secret code has been created with four spots that can be filled by one of eight different colors. If you make a guess, I will return a red dot if one of the colors in your guess is present in the secret code. If the position of that color is also correct, I will return a yellow dot. Note that the order of my response will not match the positions in the secret code.</p>

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text">#</span>
    </div>
    <input type="number" class="form-control" placeholder="#" @bind="@possitionOne" />
    <input type="number" class="form-control" placeholder="#" @bind="@possitionTwo" />
    <input type="number" class="form-control" placeholder="#" @bind="@possitionThree" />
    <input type="number" class="form-control" placeholder="#" @bind="@possitionFour" />

    <button @onclick="Guess" class="btn btn-primary" disabled="@(@result == String.Empty ? false : true)">Guess</button> <button @onclick="Resset" class="btn btn-secondary">New</button>
</div>

<div>
     <p>
        <label>Result: @result</label>
    </p>
    <p>
        <label># of tries: @count</label>
    </p>

    @if (count > 0)
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>#</th>
                    <th>POS1</th>
                    <th>POS2</th>
                    <th>POS3</th>
                    <th>POS4</th>
                    <th></th>
                    <th>RES1</th>
                    <th>RES2</th>
                    <th>RES3</th>
                    <th>RES4</th>
                </tr>
            </thead>
            <tbody>
                @for (var row = 0; row < count; row++)
                {
                    <tr>
                        <td>@(row + 1)</td>
                        <td>@log[row, 0]</td>
                        <td>@log[row, 1]</td>
                        <td>@log[row, 2]</td>
                        <td>@log[row, 3]</td>
                        <td></td>
                        <td>@results[row, 0]</td>
                        <td>@results[row, 1]</td>
                        <td>@results[row, 2]</td>
                        <td>@results[row, 3]</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>




@code {
    private int count = 0;
    //private int guess;
    private string result = String.Empty;
    private int possitionOne;
    private int possitionTwo;
    private int possitionThree;
    private int possitionFour;

    private int[,] log = new int[100, 4];
    private int[,]? results = new int[100, 4];
    private int[] guesses = new int[4];
    private int[] targets = new int[4];

    protected override async Task OnInitializedAsync()
    {
        SetAsync();
    }

    private int GetCount() => ++count;

    private async Task Guess()
    {
        await Task.Run(() =>
        {
            log[count, 0] = possitionOne;
            log[count, 1] = possitionTwo;
            log[count, 2] = possitionThree;
            log[count, 3] = possitionFour;

            results[count, 0] = Result(possitionOne, 0).Result;
            results[count, 1] = Result(possitionTwo, 1).Result;
            results[count, 2] = Result(possitionThree, 2).Result;
            results[count, 3] = Result(possitionFour, 3).Result;

            if (results[count, 0] == 2 &&
                results[count, 1] == 2 &&
                results[count, 2] == 2 &&
                results[count, 3] == 2
            )
                result = "Correct !";

            count++;
        });
    }

    private async Task SetAsync()
    {
        await Task.Run(() =>
        {
            List<int> colors = new List<int>();
            for (int i = 1; i < 9; i++)
            {
                colors.Add(i);
            }

            Random r = new Random();

            for (int n = 0; n < 4; n++)
            {
                targets[n] = colors[r.Next(0, colors.Count)];
                colors.Remove(targets[n]);
            }
        });
    }

    private async Task Resset()
    {
        await Task.Run(() =>
        {
            SetAsync();
            for (int i = 0; i < count; i++)
            {
                guesses[i] = 0;
            }
            count = 0;
            result = String.Empty;
        });
    }

    private async Task<int> Result(int guess, int position)
    {
        int result = 0;
        for (int i = 0; i < 4; i++)
        {
            if (targets[i] == guess)
            {
                result = 1;
                if (i == position)
                    result = 2;
            }
        }
        return result;
    }
}